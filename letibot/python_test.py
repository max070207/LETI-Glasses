from imports import *
from data_sort import *

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
exe_path = r'C:\Users\–ú–∞–∫—Å–∏–º\Desktop\letibot\LETI_Parser_2.exe'
TOKEN = "7995657436:AAFIVQygLKQ9-Gppo1x72u1-wPwmBtAPTts"
DB_FILE = "abit_ids.json"
EXCEL_FILE = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç_—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.xlsx"
with open('directions.json', 'r', encoding='utf-8') as f:
    directions = json.load(f)
codes = list(directions.keys())

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ö–°
async def periodic_task(interval_minutes=30):
    while True:
        result = subprocess.run([exe_path], capture_output=True, text=True)
        data_sort()
        await asyncio.sleep(interval_minutes * 60)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_db(file):
    try:
        with open(file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_db(file, data):
    with open(file, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    buttons = [["–î–æ–±–∞–≤–∏—Ç—å ID", "–ü–æ–º–æ—â—å"], ["–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text( # type: ignore
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –ø–æ–º–æ–≥–∞—é —É–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö –õ–≠–¢–ò\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b><code>/id</code></b> , —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π <strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ</strong>\n"
        "–£–∑–Ω–∞–π —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã <b><code>/get</code></b>",
        reply_markup=reply_markup, parse_mode='HTML'
    )

# –ö–æ–º–∞–Ω–¥–∞ /id
async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ</b> (7 —Ü–∏—Ñ—Ä):", parse_mode='HTML') # type: ignore
    context.user_data['awaiting_id'] = True # type: ignore

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
def is_valid_abiturient_id(abiturient_id):
    return re.fullmatch(r'\d{7}', abiturient_id) is not None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID
async def handle_abiturient_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.user_data.get('awaiting_id'): # type: ignore
        return
    user_id = str(update.message.from_user.id) # type: ignore
    abiturient_id = update.message.text.strip() # type: ignore
    if not is_valid_abiturient_id(abiturient_id):
        await update.message.reply_text("‚ùå <b>–û—à–∏–±–∫–∞!</b> –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 7 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode='HTML') # type: ignore
        return
    db = load_db(DB_FILE)
    db[user_id] = int(abiturient_id)
    save_db(DB_FILE, db)
    await update.message.reply_text(f"‚úÖ –ö–æ–¥ <code>{abiturient_id}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", parse_mode='HTML') # type: ignore
    context.user_data['awaiting_id'] = False # type: ignore

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text # type: ignore
    if text == "–ü–æ–º–æ—â—å":
        await update.message.reply_text( # type: ignore
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "/id - –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞\n"
            "/get - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
            parse_mode='HTML'
        )
    elif text == "–î–æ–±–∞–≤–∏—Ç—å ID":
        await id_command(update, context)
    elif text == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await get_admission_info(update, context)

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer() # type: ignore
    if query.data == "update_data": # type: ignore
        await get_admission_info(update, context, 1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('awaiting_id'): # type: ignore
        await handle_abiturient_id(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /get
async def get_admission_info(update: Update, context: ContextTypes.DEFAULT_TYPE, type=None) -> None:
    try:
        telegram_id = str(update.effective_user.id) # type: ignore
        db = load_db(DB_FILE)
        if telegram_id not in db:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ</b>! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/id</code> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.", parse_mode='HTML') # type: ignore
            return
        abiturient_id = db[telegram_id]
        message = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ID <code>{abiturient_id}</code>:\n\n"
        sheets = pd.ExcelFile(EXCEL_FILE).sheet_names
        counter = 0
        flag = False
        for sheet in sheets:
            df = pd.read_excel(EXCEL_FILE, sheet_name=sheet)
            applicant_row = df[df['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ'] == abiturient_id]
            if applicant_row.empty:
                counter += 1
                if counter == 3:
                    await update.message.reply_text("‚ùå –í–∞—à <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Ç—É–ø–∞—é—â–µ–≥–æ</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–¥–∞, –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/id</code> —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.", parse_mode='HTML') # type: ignore
                    return
                continue
            if not flag:
                balls = int(applicant_row['–ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –±–∞–ª–ª'].values[0])
                message += f'üìä –ë–∞–ª–ª—ã: <b>{balls}</b>\n\n'
                flag = True
            if sheet == '–¶–µ–ª–µ–≤–æ–µ':
                result_value = applicant_row['–†–µ–∑—É–ª—å—Ç–∞—Ç'].values[0]
                filtered_df = df[df['–†–µ–∑—É–ª—å—Ç–∞—Ç'] == result_value].copy()
                filtered_df.reset_index(drop=True, inplace=True)
                position = filtered_df.index[filtered_df['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ'] == abiturient_id].tolist()[0] + 1
                results = [str(applicant_row['–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ'].values[0]), str(applicant_row['–†–µ–∑—É–ª—å—Ç–∞—Ç'].values[0]), f'{position}/{len(filtered_df)}', int(applicant_row['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ'].values[0]), int(applicant_row['ID –∑–∞–∫–∞–∑—á–∏–∫–∞'].values[0]), str(applicant_row['–ù–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'].values[0])]
                message += f"üìå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {results[1]} {directions[results[1]]}\n"
                message += f"üìí ID –∑–∞–∫–∞–∑—á–∏–∫–∞: {results[4]}\n"
                message += f"üìù –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {results[5]}\n"
                message += f"üèÜ –ü–æ–∑–∏—Ü–∏—è: {results[2]}\n"
                message += f"üìç –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ: {results[3]}\n"
                message += f'üîÑ –°–æ–≥–ª–∞—Å–∏–µ: {results[0]}\n\n'
            elif sheet == '–ë—é–¥–∂–µ—Ç':
                result_value = applicant_row['–†–µ–∑—É–ª—å—Ç–∞—Ç'].values[0]
                filtered_df = df[df['–†–µ–∑—É–ª—å—Ç–∞—Ç'] == result_value].copy()
                filtered_df.reset_index(drop=True, inplace=True)
                position = filtered_df.index[filtered_df['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ'] == abiturient_id].tolist()[0] + 1
                results = [str(applicant_row['–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ'].values[0]), str(applicant_row['–†–µ–∑—É–ª—å—Ç–∞—Ç'].values[0]), f'{position}/{len(filtered_df)}', int(applicant_row['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ'].values[0])]
                message += f"üìå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {results[1]} {directions[results[1]]}\n"
                message += f"üèÜ –ü–æ–∑–∏—Ü–∏—è: {results[2]}\n"
                message += f"üìç –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ: {results[3]}\n"
                message += f'üîÑ –°–æ–≥–ª–∞—Å–∏–µ: {results[0]}\n\n'
            elif sheet == '–ö–æ–Ω—Ç—Ä–∞–∫—Ç':
                result_value = applicant_row['–†–µ–∑—É–ª—å—Ç–∞—Ç'].values[0]
                filtered_df = df[df['–†–µ–∑—É–ª—å—Ç–∞—Ç'] == result_value].copy()
                filtered_df.reset_index(drop=True, inplace=True)
                position = filtered_df.index[filtered_df['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ'] == abiturient_id].tolist()[0] + 1
                results = [str(applicant_row['–°—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–∞'].values[0]), str(applicant_row['–†–µ–∑—É–ª—å—Ç–∞—Ç'].values[0]), f'{position}/{len(filtered_df)}', int(applicant_row['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ'].values[0])]
                message += f"üìå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {results[1]} {directions[results[1]]}\n"
                message += f"üèÜ –ü–æ–∑–∏—Ü–∏—è: {results[2]}\n"
                message += f"üìç –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ: {results[3]}\n"
                message += f'üîÑ –°—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–∞: {results[0]}\n\n'
        moscow_time = datetime.now(ZoneInfo("Europe/Moscow"))
        formatted = moscow_time.strftime("%d.%m.%Y %H:%M:%S (%Z)")
        message += f"üïì –û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatted}"
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="update_data")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if type != None:
            await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup) # type: ignore
            time.sleep(1)
        else:
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup) # type: ignore
            
    except FileNotFoundError:
        if type != None:
            await update.callback_query.edit_message_text("‚ö† –§–∞–π–ª —Å –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.") # type: ignore
        else:
            await update.message.reply_text("‚ö† –§–∞–π–ª —Å –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.") # type: ignore
        print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!')
    except Exception as e:
        if type != None:
            await update.callback_query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.") # type: ignore
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.") # type: ignore
        print(e)

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.Text(["–î–æ–±–∞–≤–∏—Ç—å ID", "–ü–æ–º–æ—â—å", "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]), handle_buttons))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("id", id_command))
    application.add_handler(CommandHandler("get", get_admission_info))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

def run_async_in_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(periodic_task())

if __name__ == "__main__":
    thread = Thread(target=run_async_in_thread, daemon=True)
    thread.start()
    main()